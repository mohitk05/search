{"version":3,"sources":["Search.js","debounce.js","App.js","serviceWorker.js","index.js"],"names":["url","Search","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_onChange","value","length","then","Date","now","fetch","concat","res","json","_ref","data","setState","time","state","debouncer","func","wait","immediate","timeout","e","context","target","slice","callNow","clearTimeout","setTimeout","apply","debounce","console","log","react_default","a","createElement","className","onChange","placeholder","map","d","key","score","Component","App","src_Search","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAEA,IAAMA,EAAG,kCA0CMC,cAvCd,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAQPQ,UAAY,SAACC,GACZ,GAAGA,EAAMC,QAAU,EAAE,CACpB,IAAIC,EAAOC,KAAKC,MAChBC,MAAK,GAAAC,OAAIjB,GAAJiB,OAAUN,IACbE,KAAK,SAAAK,GAAG,OAAIA,EAAIC,SAChBN,KAAK,SAAAO,GAAc,IAAXC,EAAWD,EAAXC,KACLA,GACFlB,EAAKmB,SAAS,CAAED,OAAME,KAAMT,KAAKC,MAAQF,WAI5CV,EAAKmB,SAAS,CAAED,KAAM,MAlBvBlB,EAAKqB,MAAQ,CACZH,KAAM,GACNE,KAAM,KAEPpB,EAAKsB,UCXA,SAAkBC,EAAMC,EAAMC,GACpC,IAAIC,EACJ,OAAO,SAASC,GACT,IAAIC,EAAUzB,KAAMK,EAAQmB,GAAKA,EAAEE,OAAOrB,MAAMsB,QAKlDC,EAAUN,IAAcC,EAC5BM,aAAaN,GACbA,EAAUO,WANE,WACXP,EAAU,KACLD,GAAWF,EAAKW,MAAMN,EAAS,CAACpB,KAIVgB,GACxBO,GAASR,EAAKW,MAAMN,EAAS,CAACpB,KDAjB2B,CAASnC,EAAKO,UAAW,GANxBP,wEA0BlB,OADAoC,QAAQC,IAAIlC,KAAKkB,MAAMH,KAAKT,QAE3B6B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACdH,EAAAC,EAAAC,cAAA,SAAOE,SAAUvC,KAAKmB,UAAWqB,YAAY,sBAC7CL,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,gCAAwBrC,KAAKkB,MAAMD,KAAnC,QAA8CjB,KAAKkB,MAAMH,KAAKT,OAA9D,YACCN,KAAKkB,MAAMH,KAAK0B,IAAI,SAACC,GACrB,OAAOP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaK,IAAKD,EAAErC,OAAO8B,EAAAC,EAAAC,cAAA,SAAIK,EAAErC,OAAU8B,EAAAC,EAAAC,cAAA,SAAIK,EAAEE,kBAjCvDC,aEUNC,0LARX,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACU,EAAD,cAJUF,cCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrD,KAAK,SAAAsD,GACjCA,EAAaC","file":"static/js/main.8d40a59d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { debounce } from './debounce'\nconst url = `http://localhost:5000/search?q=`\n\nclass Search extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tdata: [],\n\t\t\ttime: '~'\n\t\t}\n\t\tthis.debouncer = debounce(this._onChange, 0)\n\t}\n\n\t_onChange = (value) => {\n\t\tif(value.length >= 3){\n\t\t\tlet then = Date.now()\n\t\t\tfetch(`${url}${value}`)\n\t\t\t\t.then(res => res.json())\n\t\t\t\t.then(({ data }) => {\n\t\t\t\t\tif(data) {\n\t\t\t\t\t\tthis.setState({ data, time: Date.now() - then })\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t} else {\n\t\t\tthis.setState({ data: [] })\n\t\t}\n\t}\n\n\trender() {\n\t\tconsole.log(this.state.data.length)\n\t\treturn (\n\t\t\t<div className=\"Search\">\n\t\t\t\t<input onChange={this.debouncer} placeholder=\"Search for a name\" />\n\t\t\t\t<br/>\n\t\t\t\t<h4>API response time: {this.state.time}ms | {this.state.data.length} results</h4>\n\t\t\t\t{this.state.data.map((d) => {\n\t\t\t\t\treturn <div className=\"searchItem\" key={d.value}><p>{d.value}</p><p>{d.score}</p></div>\n\t\t\t\t})}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Search;\n","export function debounce(func, wait, immediate) {\n\tvar timeout;\n\treturn function(e) {\n        var context = this, value = e && e.target.value.slice();\n\t\tvar later = function() {\n\t\t\ttimeout = null;\n\t\t\tif (!immediate) func.apply(context, [value]);\n\t\t};\n\t\tvar callNow = immediate && !timeout;\n\t\tclearTimeout(timeout);\n\t\ttimeout = setTimeout(later, wait);\n\t\tif (callNow) func.apply(context, [value]);\n\t};\n};","import React, { Component } from 'react';\nimport Search from './Search'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Search />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}